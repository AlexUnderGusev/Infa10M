#include <iostream>
#include <string>
using namespace std;
struct Node {                
	int value;         
	Node* next, *prev;      
};
struct deque {
	Node* head = nullptr;      
	Node* tail = nullptr;
	int counter = 0;
	void push_back(int nummer) {
		Node* element = new Node; 
		element->value = nummer;  
		counter++;
		if (!head) {         
			head = element;    
			tail = head;      
		}
		else {
			element->prev = tail; 
			tail->next = element; 
			tail = element;      
		}
	}
	void push_front(int nummer) {
		Node* element = new Node;
		element->value = nummer;
		counter++;
		if (!head) {
			head = element;
			tail = head;
		}
		else {
			element->next = head;      
			head->prev = element;      
			head = element;          
		}
	}
	void pop_back() {
		if (counter != 0) {              
			cout << tail->value << endl;
			if (counter > 1) {         
				Node* element = tail;    
				tail = tail->prev; 
				tail->next = nullptr;    
				delete element;     
				counter--;        
			}
			else {               
				head = tail = 0;        
				counter--;        
			}
		}
		else cout << "error" << endl;
	}
	void pop_front() {
		if (counter != 0) {
			cout << head->value << endl;
			if (head->next) {        
				Node* element = head; 
				head = head->next; 
				head->prev = nullptr;  
				delete element;     
				counter--;        
			}
			else if (head == tail) {    
				head->next = nullptr;  
				head = nullptr;       
				delete head;        
				counter = 0;        
			}
		}
		else cout << "error" << endl;
	}
	void back() {
		if (counter != 0)cout << tail->value << endl; 
		else cout << "error" << endl;
	}
	void front() {
		if (counter != 0)cout << head->value << endl; 
		else cout << "error" << endl;
	}
	void size() {
		cout << counter << endl;          
	}
	void clear() {
		counter = 0;
		while (head)
		{
			tail = head->next;
			delete head;
			head = tail;
		}
	}
	void exit(){}
};
int main() 
{
	deque deq;
	string str;
	while (cin >> str) 
	{
		if (str == "push_front") 
		{
			int num;
			cin >> num;
			deq.push_front(num);
		}
		if (str == "push_back") 
		{
			int num;
			cin >> num;
			deq.push_back(num);
		}
		if (str == "pop_front")deq.pop_front();
		if (str == "pop_back")deq.pop_back();
		if (str == "clear")deq.clear();
		if (str == "size")deq.size();
		if (str == "front")deq.front();
		if (str == "back")deq.back();
		if (str == "exit") {
			deq.exit();
			break;
		}
	}
	return 0;
}